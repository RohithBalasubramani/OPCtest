# Generated by Django 5.1.1 on 2024-10-04 15:30

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='P1_AMFS_APFC1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_APFC2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_APFC3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_APFC4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_Generator1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_Generator2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_Generator3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_Generator4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_Outgoing1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_Outgoing2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_Outgoing3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_Outgoing4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_Transformer1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_Transformer2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_Transformer3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_AMFS_Transformer4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_APFCPanels_Panel1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_APFCPanels_Panel2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_APFCPanels_Panel3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_APFCPanels_Panel4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP1_HotWaterTank1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP1_HotWaterTank2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP2_IncomerTF2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP2_SINXP1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP2_SINXP2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP2_SINXP4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP3_AirCompressor1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP3_AirCompressor2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP3_AirCompressor3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP3_AirCompressor4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP3_Incomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP4_AHU1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP4_AHU10',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP4_AHU2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP4_AHU3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP4_AHU4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP4_AHU5',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP4_AHU6',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP4_AHU7',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP4_AHU8',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP4_AHU9',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP4_AxialFlowFan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP4_Incomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellLTP4_Spare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellToolLTP1_ALOX1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellToolLTP1_ALOX2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellToolLTP1_ALOX3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellToolLTP1_Incomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellToolPDB1_Diffusion1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellToolPDB1_Diffusion2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellToolPDB1_Diffusion3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellToolPDB1_Incomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellToolPDB2_Incomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellToolPDB2_SINXP3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_CellToolPDB2_Spare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_ElectricalPanel_Incomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC1_CellIncomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC1_Chiller2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC1_LTP1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC1_LTP2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC1_UPS1A',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC1_UPS1B',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC1_UPS1C',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC1_UPS1D',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC1_UPS1E',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC2_CellIncomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC2_Lighting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC2_OGCellLTP2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC2_OGCellToolPDB2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC2_UPS2A',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC2_UPS2B',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC2_UPS2C',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC2_UPS2D',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC2_UPS2E',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_CellIncomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_CellLTP3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_Chiller3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_Chiller4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_ConcentratorETP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_ConcentratorStream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_DGExhaust',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_DIStream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_ExhaustUtility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_FireHydrant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_MEETFP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_MVR',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_RinseStream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_ScrubberExhaust',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC3_SolarIncomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC4_CellIncomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC4_CellLTP4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC4_Chiller1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC4_CoolingTower',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PCC4_SolarIncomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PeiPelAHU5',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_power', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('dc_power', models.FloatField()),
                ('dc_voltage', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fault', models.CharField(max_length=255)),
                ('frequency', models.FloatField()),
                ('inv_fault_subcode', models.CharField(max_length=255)),
                ('inv_warning_bit_h', models.IntegerField()),
                ('inv_warning_subcode', models.IntegerField()),
                ('peak_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('pv1_current', models.FloatField()),
                ('pv1_dc_current', models.FloatField()),
                ('pv1_dc_power', models.FloatField()),
                ('pv1_dc_voltage', models.FloatField()),
                ('pv1_voltage', models.FloatField()),
                ('pv10_current', models.FloatField()),
                ('pv10_voltage', models.FloatField()),
                ('pv11_current', models.FloatField()),
                ('pv11_voltage', models.FloatField()),
                ('pv12_current', models.FloatField()),
                ('pv12_voltage', models.FloatField()),
                ('pv13_current', models.FloatField()),
                ('pv13_voltage', models.FloatField()),
                ('pv14_current', models.FloatField()),
                ('pv14_voltage', models.FloatField()),
                ('pv15_current', models.FloatField()),
                ('pv15_voltage', models.FloatField()),
                ('pv16_current', models.FloatField()),
                ('pv16_voltage', models.FloatField()),
                ('pv17_current', models.FloatField()),
                ('pv17_voltage', models.FloatField()),
                ('pv18_current', models.FloatField()),
                ('pv18_voltage', models.FloatField()),
                ('pv19_current', models.FloatField()),
                ('pv19_voltage', models.FloatField()),
                ('pv2_current', models.FloatField()),
                ('pv2_dc_current', models.FloatField()),
                ('pv2_dc_power', models.FloatField()),
                ('pv2_dc_voltage', models.FloatField()),
                ('pv2_voltage', models.FloatField()),
                ('pv20_current', models.FloatField()),
                ('pv20_voltage', models.FloatField()),
                ('pv3_current', models.FloatField()),
                ('pv3_dc_current', models.FloatField()),
                ('pv3_dc_power', models.FloatField()),
                ('pv3_dc_voltage', models.FloatField()),
                ('pv3_voltage', models.FloatField()),
                ('pv4_current', models.FloatField()),
                ('pv4_dc_current', models.FloatField()),
                ('pv4_dc_power', models.FloatField()),
                ('pv4_dc_voltage', models.FloatField()),
                ('pv4_voltage', models.FloatField()),
                ('pv5_current', models.FloatField()),
                ('pv5_dc_current', models.FloatField()),
                ('pv5_dc_power', models.FloatField()),
                ('pv5_dc_voltage', models.FloatField()),
                ('pv5_voltage', models.FloatField()),
                ('pv6_current', models.FloatField()),
                ('pv6_dc_current', models.FloatField()),
                ('pv6_dc_power', models.FloatField()),
                ('pv6_dc_voltage', models.FloatField()),
                ('pv6_voltage', models.FloatField()),
                ('pv7_current', models.FloatField()),
                ('pv7_dc_current', models.FloatField()),
                ('pv7_dc_power', models.FloatField()),
                ('pv7_dc_voltage', models.FloatField()),
                ('pv7_voltage', models.FloatField()),
                ('pv8_current', models.FloatField()),
                ('pv8_dc_current', models.FloatField()),
                ('pv8_dc_power', models.FloatField()),
                ('pv8_dc_voltage', models.FloatField()),
                ('pv8_voltage', models.FloatField()),
                ('pv9_current', models.FloatField()),
                ('pv9_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('status', models.CharField(max_length=255)),
                ('temp', models.FloatField()),
                ('today_energy', models.FloatField()),
                ('total_energy', models.FloatField()),
                ('total_strings_current', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yest_energy', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PeiPelAHU6',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_power', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('dc_power', models.FloatField()),
                ('dc_voltage', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fault', models.CharField(max_length=255)),
                ('frequency', models.FloatField()),
                ('inv_fault_subcode', models.CharField(max_length=255)),
                ('inv_warning_bit_h', models.IntegerField()),
                ('inv_warning_subcode', models.IntegerField()),
                ('peak_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('pv1_current', models.FloatField()),
                ('pv1_dc_current', models.FloatField()),
                ('pv1_dc_power', models.FloatField()),
                ('pv1_dc_voltage', models.FloatField()),
                ('pv1_voltage', models.FloatField()),
                ('pv10_current', models.FloatField()),
                ('pv10_voltage', models.FloatField()),
                ('pv11_current', models.FloatField()),
                ('pv11_voltage', models.FloatField()),
                ('pv12_current', models.FloatField()),
                ('pv12_voltage', models.FloatField()),
                ('pv13_current', models.FloatField()),
                ('pv13_voltage', models.FloatField()),
                ('pv14_current', models.FloatField()),
                ('pv14_voltage', models.FloatField()),
                ('pv15_current', models.FloatField()),
                ('pv15_voltage', models.FloatField()),
                ('pv16_current', models.FloatField()),
                ('pv16_voltage', models.FloatField()),
                ('pv17_current', models.FloatField()),
                ('pv17_voltage', models.FloatField()),
                ('pv18_current', models.FloatField()),
                ('pv18_voltage', models.FloatField()),
                ('pv19_current', models.FloatField()),
                ('pv19_voltage', models.FloatField()),
                ('pv2_current', models.FloatField()),
                ('pv2_dc_current', models.FloatField()),
                ('pv2_dc_power', models.FloatField()),
                ('pv2_dc_voltage', models.FloatField()),
                ('pv2_voltage', models.FloatField()),
                ('pv20_current', models.FloatField()),
                ('pv20_voltage', models.FloatField()),
                ('pv3_current', models.FloatField()),
                ('pv3_dc_current', models.FloatField()),
                ('pv3_dc_power', models.FloatField()),
                ('pv3_dc_voltage', models.FloatField()),
                ('pv3_voltage', models.FloatField()),
                ('pv4_current', models.FloatField()),
                ('pv4_dc_current', models.FloatField()),
                ('pv4_dc_power', models.FloatField()),
                ('pv4_dc_voltage', models.FloatField()),
                ('pv4_voltage', models.FloatField()),
                ('pv5_current', models.FloatField()),
                ('pv5_dc_current', models.FloatField()),
                ('pv5_dc_power', models.FloatField()),
                ('pv5_dc_voltage', models.FloatField()),
                ('pv5_voltage', models.FloatField()),
                ('pv6_current', models.FloatField()),
                ('pv6_dc_current', models.FloatField()),
                ('pv6_dc_power', models.FloatField()),
                ('pv6_dc_voltage', models.FloatField()),
                ('pv6_voltage', models.FloatField()),
                ('pv7_current', models.FloatField()),
                ('pv7_dc_current', models.FloatField()),
                ('pv7_dc_power', models.FloatField()),
                ('pv7_dc_voltage', models.FloatField()),
                ('pv7_voltage', models.FloatField()),
                ('pv8_current', models.FloatField()),
                ('pv8_dc_current', models.FloatField()),
                ('pv8_dc_power', models.FloatField()),
                ('pv8_dc_voltage', models.FloatField()),
                ('pv8_voltage', models.FloatField()),
                ('pv9_current', models.FloatField()),
                ('pv9_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('status', models.CharField(max_length=255)),
                ('temp', models.FloatField()),
                ('today_energy', models.FloatField()),
                ('total_energy', models.FloatField()),
                ('total_strings_current', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yest_energy', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PeiPlAHU7',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_power', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('dc_power', models.FloatField()),
                ('dc_voltage', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fault', models.CharField(max_length=255)),
                ('frequency', models.FloatField()),
                ('inv_fault_subcode', models.CharField(max_length=255)),
                ('inv_warning_bit_h', models.IntegerField()),
                ('inv_warning_subcode', models.IntegerField()),
                ('peak_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('pv1_current', models.FloatField()),
                ('pv1_dc_current', models.FloatField()),
                ('pv1_dc_power', models.FloatField()),
                ('pv1_dc_voltage', models.FloatField()),
                ('pv1_voltage', models.FloatField()),
                ('pv10_current', models.FloatField()),
                ('pv10_voltage', models.FloatField()),
                ('pv11_current', models.FloatField()),
                ('pv11_voltage', models.FloatField()),
                ('pv12_current', models.FloatField()),
                ('pv12_voltage', models.FloatField()),
                ('pv13_current', models.FloatField()),
                ('pv13_voltage', models.FloatField()),
                ('pv14_current', models.FloatField()),
                ('pv14_voltage', models.FloatField()),
                ('pv15_current', models.FloatField()),
                ('pv15_voltage', models.FloatField()),
                ('pv16_current', models.FloatField()),
                ('pv16_voltage', models.FloatField()),
                ('pv17_current', models.FloatField()),
                ('pv17_voltage', models.FloatField()),
                ('pv18_current', models.FloatField()),
                ('pv18_voltage', models.FloatField()),
                ('pv19_current', models.FloatField()),
                ('pv19_voltage', models.FloatField()),
                ('pv2_current', models.FloatField()),
                ('pv2_dc_current', models.FloatField()),
                ('pv2_dc_power', models.FloatField()),
                ('pv2_dc_voltage', models.FloatField()),
                ('pv2_voltage', models.FloatField()),
                ('pv20_current', models.FloatField()),
                ('pv20_voltage', models.FloatField()),
                ('pv3_current', models.FloatField()),
                ('pv3_dc_current', models.FloatField()),
                ('pv3_dc_power', models.FloatField()),
                ('pv3_dc_voltage', models.FloatField()),
                ('pv3_voltage', models.FloatField()),
                ('pv4_current', models.FloatField()),
                ('pv4_dc_current', models.FloatField()),
                ('pv4_dc_power', models.FloatField()),
                ('pv4_dc_voltage', models.FloatField()),
                ('pv4_voltage', models.FloatField()),
                ('pv5_current', models.FloatField()),
                ('pv5_dc_current', models.FloatField()),
                ('pv5_dc_power', models.FloatField()),
                ('pv5_dc_voltage', models.FloatField()),
                ('pv5_voltage', models.FloatField()),
                ('pv6_current', models.FloatField()),
                ('pv6_dc_current', models.FloatField()),
                ('pv6_dc_power', models.FloatField()),
                ('pv6_dc_voltage', models.FloatField()),
                ('pv6_voltage', models.FloatField()),
                ('pv7_current', models.FloatField()),
                ('pv7_dc_current', models.FloatField()),
                ('pv7_dc_power', models.FloatField()),
                ('pv7_dc_voltage', models.FloatField()),
                ('pv7_voltage', models.FloatField()),
                ('pv8_current', models.FloatField()),
                ('pv8_dc_current', models.FloatField()),
                ('pv8_dc_power', models.FloatField()),
                ('pv8_dc_voltage', models.FloatField()),
                ('pv8_voltage', models.FloatField()),
                ('pv9_current', models.FloatField()),
                ('pv9_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('status', models.CharField(max_length=255)),
                ('temp', models.FloatField()),
                ('today_energy', models.FloatField()),
                ('total_energy', models.FloatField()),
                ('total_strings_current', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yest_energy', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PeiPlAHU8',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_power', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('dc_power', models.FloatField()),
                ('dc_voltage', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fault', models.CharField(max_length=255)),
                ('frequency', models.FloatField()),
                ('inv_fault_subcode', models.CharField(max_length=255)),
                ('inv_warning_bit_h', models.IntegerField()),
                ('inv_warning_subcode', models.IntegerField()),
                ('peak_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('pv1_current', models.FloatField()),
                ('pv1_dc_current', models.FloatField()),
                ('pv1_dc_power', models.FloatField()),
                ('pv1_dc_voltage', models.FloatField()),
                ('pv1_voltage', models.FloatField()),
                ('pv10_current', models.FloatField()),
                ('pv10_voltage', models.FloatField()),
                ('pv11_current', models.FloatField()),
                ('pv11_voltage', models.FloatField()),
                ('pv12_current', models.FloatField()),
                ('pv12_voltage', models.FloatField()),
                ('pv13_current', models.FloatField()),
                ('pv13_voltage', models.FloatField()),
                ('pv14_current', models.FloatField()),
                ('pv14_voltage', models.FloatField()),
                ('pv15_current', models.FloatField()),
                ('pv15_voltage', models.FloatField()),
                ('pv16_current', models.FloatField()),
                ('pv16_voltage', models.FloatField()),
                ('pv17_current', models.FloatField()),
                ('pv17_voltage', models.FloatField()),
                ('pv18_current', models.FloatField()),
                ('pv18_voltage', models.FloatField()),
                ('pv19_current', models.FloatField()),
                ('pv19_voltage', models.FloatField()),
                ('pv2_current', models.FloatField()),
                ('pv2_dc_current', models.FloatField()),
                ('pv2_dc_power', models.FloatField()),
                ('pv2_dc_voltage', models.FloatField()),
                ('pv2_voltage', models.FloatField()),
                ('pv20_current', models.FloatField()),
                ('pv20_voltage', models.FloatField()),
                ('pv3_current', models.FloatField()),
                ('pv3_dc_current', models.FloatField()),
                ('pv3_dc_power', models.FloatField()),
                ('pv3_dc_voltage', models.FloatField()),
                ('pv3_voltage', models.FloatField()),
                ('pv4_current', models.FloatField()),
                ('pv4_dc_current', models.FloatField()),
                ('pv4_dc_power', models.FloatField()),
                ('pv4_dc_voltage', models.FloatField()),
                ('pv4_voltage', models.FloatField()),
                ('pv5_current', models.FloatField()),
                ('pv5_dc_current', models.FloatField()),
                ('pv5_dc_power', models.FloatField()),
                ('pv5_dc_voltage', models.FloatField()),
                ('pv5_voltage', models.FloatField()),
                ('pv6_current', models.FloatField()),
                ('pv6_dc_current', models.FloatField()),
                ('pv6_dc_power', models.FloatField()),
                ('pv6_dc_voltage', models.FloatField()),
                ('pv6_voltage', models.FloatField()),
                ('pv7_current', models.FloatField()),
                ('pv7_dc_current', models.FloatField()),
                ('pv7_dc_power', models.FloatField()),
                ('pv7_dc_voltage', models.FloatField()),
                ('pv7_voltage', models.FloatField()),
                ('pv8_current', models.FloatField()),
                ('pv8_dc_current', models.FloatField()),
                ('pv8_dc_power', models.FloatField()),
                ('pv8_dc_voltage', models.FloatField()),
                ('pv8_voltage', models.FloatField()),
                ('pv9_current', models.FloatField()),
                ('pv9_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('status', models.CharField(max_length=255)),
                ('temp', models.FloatField()),
                ('today_energy', models.FloatField()),
                ('total_energy', models.FloatField()),
                ('total_strings_current', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yest_energy', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplAHU10',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_power', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('dc_power', models.FloatField()),
                ('dc_voltage', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fault', models.CharField(max_length=255)),
                ('frequency', models.FloatField()),
                ('inv_fault_subcode', models.CharField(max_length=255)),
                ('inv_warning_bit_h', models.IntegerField()),
                ('inv_warning_subcode', models.IntegerField()),
                ('peak_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('pv1_current', models.FloatField()),
                ('pv1_dc_current', models.FloatField()),
                ('pv1_dc_power', models.FloatField()),
                ('pv1_dc_voltage', models.FloatField()),
                ('pv1_voltage', models.FloatField()),
                ('pv10_current', models.FloatField()),
                ('pv10_voltage', models.FloatField()),
                ('pv11_current', models.FloatField()),
                ('pv11_voltage', models.FloatField()),
                ('pv12_current', models.FloatField()),
                ('pv12_voltage', models.FloatField()),
                ('pv13_current', models.FloatField()),
                ('pv13_voltage', models.FloatField()),
                ('pv14_current', models.FloatField()),
                ('pv14_voltage', models.FloatField()),
                ('pv15_current', models.FloatField()),
                ('pv15_voltage', models.FloatField()),
                ('pv16_current', models.FloatField()),
                ('pv16_voltage', models.FloatField()),
                ('pv17_current', models.FloatField()),
                ('pv17_voltage', models.FloatField()),
                ('pv18_current', models.FloatField()),
                ('pv18_voltage', models.FloatField()),
                ('pv19_current', models.FloatField()),
                ('pv19_voltage', models.FloatField()),
                ('pv2_current', models.FloatField()),
                ('pv2_dc_current', models.FloatField()),
                ('pv2_dc_power', models.FloatField()),
                ('pv2_dc_voltage', models.FloatField()),
                ('pv2_voltage', models.FloatField()),
                ('pv20_current', models.FloatField()),
                ('pv20_voltage', models.FloatField()),
                ('pv3_current', models.FloatField()),
                ('pv3_dc_current', models.FloatField()),
                ('pv3_dc_power', models.FloatField()),
                ('pv3_dc_voltage', models.FloatField()),
                ('pv3_voltage', models.FloatField()),
                ('pv4_current', models.FloatField()),
                ('pv4_dc_current', models.FloatField()),
                ('pv4_dc_power', models.FloatField()),
                ('pv4_dc_voltage', models.FloatField()),
                ('pv4_voltage', models.FloatField()),
                ('pv5_current', models.FloatField()),
                ('pv5_dc_current', models.FloatField()),
                ('pv5_dc_power', models.FloatField()),
                ('pv5_dc_voltage', models.FloatField()),
                ('pv5_voltage', models.FloatField()),
                ('pv6_current', models.FloatField()),
                ('pv6_dc_current', models.FloatField()),
                ('pv6_dc_power', models.FloatField()),
                ('pv6_dc_voltage', models.FloatField()),
                ('pv6_voltage', models.FloatField()),
                ('pv7_current', models.FloatField()),
                ('pv7_dc_current', models.FloatField()),
                ('pv7_dc_power', models.FloatField()),
                ('pv7_dc_voltage', models.FloatField()),
                ('pv7_voltage', models.FloatField()),
                ('pv8_current', models.FloatField()),
                ('pv8_dc_current', models.FloatField()),
                ('pv8_dc_power', models.FloatField()),
                ('pv8_dc_voltage', models.FloatField()),
                ('pv8_voltage', models.FloatField()),
                ('pv9_current', models.FloatField()),
                ('pv9_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('status', models.CharField(max_length=255)),
                ('temp', models.FloatField()),
                ('today_energy', models.FloatField()),
                ('total_energy', models.FloatField()),
                ('total_strings_current', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yest_energy', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplAHU2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_power', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('dc_power', models.FloatField()),
                ('dc_voltage', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fault', models.CharField(max_length=255)),
                ('frequency', models.FloatField()),
                ('inv_fault_subcode', models.CharField(max_length=255)),
                ('inv_warning_bit_h', models.IntegerField()),
                ('inv_warning_subcode', models.IntegerField()),
                ('peak_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('pv1_current', models.FloatField()),
                ('pv1_dc_current', models.FloatField()),
                ('pv1_dc_power', models.FloatField()),
                ('pv1_dc_voltage', models.FloatField()),
                ('pv1_voltage', models.FloatField()),
                ('pv10_current', models.FloatField()),
                ('pv10_voltage', models.FloatField()),
                ('pv11_current', models.FloatField()),
                ('pv11_voltage', models.FloatField()),
                ('pv12_current', models.FloatField()),
                ('pv12_voltage', models.FloatField()),
                ('pv13_current', models.FloatField()),
                ('pv13_voltage', models.FloatField()),
                ('pv14_current', models.FloatField()),
                ('pv14_voltage', models.FloatField()),
                ('pv15_current', models.FloatField()),
                ('pv15_voltage', models.FloatField()),
                ('pv16_current', models.FloatField()),
                ('pv16_voltage', models.FloatField()),
                ('pv17_current', models.FloatField()),
                ('pv17_voltage', models.FloatField()),
                ('pv18_current', models.FloatField()),
                ('pv18_voltage', models.FloatField()),
                ('pv19_current', models.FloatField()),
                ('pv19_voltage', models.FloatField()),
                ('pv2_current', models.FloatField()),
                ('pv2_dc_current', models.FloatField()),
                ('pv2_dc_power', models.FloatField()),
                ('pv2_dc_voltage', models.FloatField()),
                ('pv2_voltage', models.FloatField()),
                ('pv20_current', models.FloatField()),
                ('pv20_voltage', models.FloatField()),
                ('pv3_current', models.FloatField()),
                ('pv3_dc_current', models.FloatField()),
                ('pv3_dc_power', models.FloatField()),
                ('pv3_dc_voltage', models.FloatField()),
                ('pv3_voltage', models.FloatField()),
                ('pv4_current', models.FloatField()),
                ('pv4_dc_current', models.FloatField()),
                ('pv4_dc_power', models.FloatField()),
                ('pv4_dc_voltage', models.FloatField()),
                ('pv4_voltage', models.FloatField()),
                ('pv5_current', models.FloatField()),
                ('pv5_dc_current', models.FloatField()),
                ('pv5_dc_power', models.FloatField()),
                ('pv5_dc_voltage', models.FloatField()),
                ('pv5_voltage', models.FloatField()),
                ('pv6_current', models.FloatField()),
                ('pv6_dc_current', models.FloatField()),
                ('pv6_dc_power', models.FloatField()),
                ('pv6_dc_voltage', models.FloatField()),
                ('pv6_voltage', models.FloatField()),
                ('pv7_current', models.FloatField()),
                ('pv7_dc_current', models.FloatField()),
                ('pv7_dc_power', models.FloatField()),
                ('pv7_dc_voltage', models.FloatField()),
                ('pv7_voltage', models.FloatField()),
                ('pv8_current', models.FloatField()),
                ('pv8_dc_current', models.FloatField()),
                ('pv8_dc_power', models.FloatField()),
                ('pv8_dc_voltage', models.FloatField()),
                ('pv8_voltage', models.FloatField()),
                ('pv9_current', models.FloatField()),
                ('pv9_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('status', models.CharField(max_length=255)),
                ('temp', models.FloatField()),
                ('today_energy', models.FloatField()),
                ('total_energy', models.FloatField()),
                ('total_strings_current', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yest_energy', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplAHU3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_power', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('dc_power', models.FloatField()),
                ('dc_voltage', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fault', models.CharField(max_length=255)),
                ('frequency', models.FloatField()),
                ('inv_fault_subcode', models.CharField(max_length=255)),
                ('inv_warning_bit_h', models.IntegerField()),
                ('inv_warning_subcode', models.IntegerField()),
                ('peak_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('pv1_current', models.FloatField()),
                ('pv1_dc_current', models.FloatField()),
                ('pv1_dc_power', models.FloatField()),
                ('pv1_dc_voltage', models.FloatField()),
                ('pv1_voltage', models.FloatField()),
                ('pv10_current', models.FloatField()),
                ('pv10_voltage', models.FloatField()),
                ('pv11_current', models.FloatField()),
                ('pv11_voltage', models.FloatField()),
                ('pv12_current', models.FloatField()),
                ('pv12_voltage', models.FloatField()),
                ('pv13_current', models.FloatField()),
                ('pv13_voltage', models.FloatField()),
                ('pv14_current', models.FloatField()),
                ('pv14_voltage', models.FloatField()),
                ('pv15_current', models.FloatField()),
                ('pv15_voltage', models.FloatField()),
                ('pv16_current', models.FloatField()),
                ('pv16_voltage', models.FloatField()),
                ('pv17_current', models.FloatField()),
                ('pv17_voltage', models.FloatField()),
                ('pv18_current', models.FloatField()),
                ('pv18_voltage', models.FloatField()),
                ('pv19_current', models.FloatField()),
                ('pv19_voltage', models.FloatField()),
                ('pv2_current', models.FloatField()),
                ('pv2_dc_current', models.FloatField()),
                ('pv2_dc_power', models.FloatField()),
                ('pv2_dc_voltage', models.FloatField()),
                ('pv2_voltage', models.FloatField()),
                ('pv20_current', models.FloatField()),
                ('pv20_voltage', models.FloatField()),
                ('pv3_current', models.FloatField()),
                ('pv3_dc_current', models.FloatField()),
                ('pv3_dc_power', models.FloatField()),
                ('pv3_dc_voltage', models.FloatField()),
                ('pv3_voltage', models.FloatField()),
                ('pv4_current', models.FloatField()),
                ('pv4_dc_current', models.FloatField()),
                ('pv4_dc_power', models.FloatField()),
                ('pv4_dc_voltage', models.FloatField()),
                ('pv4_voltage', models.FloatField()),
                ('pv5_current', models.FloatField()),
                ('pv5_dc_current', models.FloatField()),
                ('pv5_dc_power', models.FloatField()),
                ('pv5_dc_voltage', models.FloatField()),
                ('pv5_voltage', models.FloatField()),
                ('pv6_current', models.FloatField()),
                ('pv6_dc_current', models.FloatField()),
                ('pv6_dc_power', models.FloatField()),
                ('pv6_dc_voltage', models.FloatField()),
                ('pv6_voltage', models.FloatField()),
                ('pv7_current', models.FloatField()),
                ('pv7_dc_current', models.FloatField()),
                ('pv7_dc_power', models.FloatField()),
                ('pv7_dc_voltage', models.FloatField()),
                ('pv7_voltage', models.FloatField()),
                ('pv8_current', models.FloatField()),
                ('pv8_dc_current', models.FloatField()),
                ('pv8_dc_power', models.FloatField()),
                ('pv8_dc_voltage', models.FloatField()),
                ('pv8_voltage', models.FloatField()),
                ('pv9_current', models.FloatField()),
                ('pv9_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('status', models.CharField(max_length=255)),
                ('temp', models.FloatField()),
                ('today_energy', models.FloatField()),
                ('total_energy', models.FloatField()),
                ('total_strings_current', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yest_energy', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplAHU4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_power', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('dc_power', models.FloatField()),
                ('dc_voltage', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fault', models.CharField(max_length=255)),
                ('frequency', models.FloatField()),
                ('inv_fault_subcode', models.CharField(max_length=255)),
                ('inv_warning_bit_h', models.IntegerField()),
                ('inv_warning_subcode', models.IntegerField()),
                ('peak_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('pv1_current', models.FloatField()),
                ('pv1_dc_current', models.FloatField()),
                ('pv1_dc_power', models.FloatField()),
                ('pv1_dc_voltage', models.FloatField()),
                ('pv1_voltage', models.FloatField()),
                ('pv10_current', models.FloatField()),
                ('pv10_voltage', models.FloatField()),
                ('pv11_current', models.FloatField()),
                ('pv11_voltage', models.FloatField()),
                ('pv12_current', models.FloatField()),
                ('pv12_voltage', models.FloatField()),
                ('pv13_current', models.FloatField()),
                ('pv13_voltage', models.FloatField()),
                ('pv14_current', models.FloatField()),
                ('pv14_voltage', models.FloatField()),
                ('pv15_current', models.FloatField()),
                ('pv15_voltage', models.FloatField()),
                ('pv16_current', models.FloatField()),
                ('pv16_voltage', models.FloatField()),
                ('pv17_current', models.FloatField()),
                ('pv17_voltage', models.FloatField()),
                ('pv18_current', models.FloatField()),
                ('pv18_voltage', models.FloatField()),
                ('pv19_current', models.FloatField()),
                ('pv19_voltage', models.FloatField()),
                ('pv2_current', models.FloatField()),
                ('pv2_dc_current', models.FloatField()),
                ('pv2_dc_power', models.FloatField()),
                ('pv2_dc_voltage', models.FloatField()),
                ('pv2_voltage', models.FloatField()),
                ('pv20_current', models.FloatField()),
                ('pv20_voltage', models.FloatField()),
                ('pv3_current', models.FloatField()),
                ('pv3_dc_current', models.FloatField()),
                ('pv3_dc_power', models.FloatField()),
                ('pv3_dc_voltage', models.FloatField()),
                ('pv3_voltage', models.FloatField()),
                ('pv4_current', models.FloatField()),
                ('pv4_dc_current', models.FloatField()),
                ('pv4_dc_power', models.FloatField()),
                ('pv4_dc_voltage', models.FloatField()),
                ('pv4_voltage', models.FloatField()),
                ('pv5_current', models.FloatField()),
                ('pv5_dc_current', models.FloatField()),
                ('pv5_dc_power', models.FloatField()),
                ('pv5_dc_voltage', models.FloatField()),
                ('pv5_voltage', models.FloatField()),
                ('pv6_current', models.FloatField()),
                ('pv6_dc_current', models.FloatField()),
                ('pv6_dc_power', models.FloatField()),
                ('pv6_dc_voltage', models.FloatField()),
                ('pv6_voltage', models.FloatField()),
                ('pv7_current', models.FloatField()),
                ('pv7_dc_current', models.FloatField()),
                ('pv7_dc_power', models.FloatField()),
                ('pv7_dc_voltage', models.FloatField()),
                ('pv7_voltage', models.FloatField()),
                ('pv8_current', models.FloatField()),
                ('pv8_dc_current', models.FloatField()),
                ('pv8_dc_power', models.FloatField()),
                ('pv8_dc_voltage', models.FloatField()),
                ('pv8_voltage', models.FloatField()),
                ('pv9_current', models.FloatField()),
                ('pv9_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('status', models.CharField(max_length=255)),
                ('temp', models.FloatField()),
                ('today_energy', models.FloatField()),
                ('total_energy', models.FloatField()),
                ('total_strings_current', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yest_energy', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplAHU5',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_power', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('dc_power', models.FloatField()),
                ('dc_voltage', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fault', models.CharField(max_length=255)),
                ('frequency', models.FloatField()),
                ('inv_fault_subcode', models.CharField(max_length=255)),
                ('inv_warning_bit_h', models.IntegerField()),
                ('inv_warning_subcode', models.IntegerField()),
                ('peak_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('pv1_current', models.FloatField()),
                ('pv1_dc_current', models.FloatField()),
                ('pv1_dc_power', models.FloatField()),
                ('pv1_dc_voltage', models.FloatField()),
                ('pv1_voltage', models.FloatField()),
                ('pv10_current', models.FloatField()),
                ('pv10_voltage', models.FloatField()),
                ('pv11_current', models.FloatField()),
                ('pv11_voltage', models.FloatField()),
                ('pv12_current', models.FloatField()),
                ('pv12_voltage', models.FloatField()),
                ('pv13_current', models.FloatField()),
                ('pv13_voltage', models.FloatField()),
                ('pv14_current', models.FloatField()),
                ('pv14_voltage', models.FloatField()),
                ('pv15_current', models.FloatField()),
                ('pv15_voltage', models.FloatField()),
                ('pv16_current', models.FloatField()),
                ('pv16_voltage', models.FloatField()),
                ('pv17_current', models.FloatField()),
                ('pv17_voltage', models.FloatField()),
                ('pv18_current', models.FloatField()),
                ('pv18_voltage', models.FloatField()),
                ('pv19_current', models.FloatField()),
                ('pv19_voltage', models.FloatField()),
                ('pv2_current', models.FloatField()),
                ('pv2_dc_current', models.FloatField()),
                ('pv2_dc_power', models.FloatField()),
                ('pv2_dc_voltage', models.FloatField()),
                ('pv2_voltage', models.FloatField()),
                ('pv20_current', models.FloatField()),
                ('pv20_voltage', models.FloatField()),
                ('pv3_current', models.FloatField()),
                ('pv3_dc_current', models.FloatField()),
                ('pv3_dc_power', models.FloatField()),
                ('pv3_dc_voltage', models.FloatField()),
                ('pv3_voltage', models.FloatField()),
                ('pv4_current', models.FloatField()),
                ('pv4_dc_current', models.FloatField()),
                ('pv4_dc_power', models.FloatField()),
                ('pv4_dc_voltage', models.FloatField()),
                ('pv4_voltage', models.FloatField()),
                ('pv5_current', models.FloatField()),
                ('pv5_dc_current', models.FloatField()),
                ('pv5_dc_power', models.FloatField()),
                ('pv5_dc_voltage', models.FloatField()),
                ('pv5_voltage', models.FloatField()),
                ('pv6_current', models.FloatField()),
                ('pv6_dc_current', models.FloatField()),
                ('pv6_dc_power', models.FloatField()),
                ('pv6_dc_voltage', models.FloatField()),
                ('pv6_voltage', models.FloatField()),
                ('pv7_current', models.FloatField()),
                ('pv7_dc_current', models.FloatField()),
                ('pv7_dc_power', models.FloatField()),
                ('pv7_dc_voltage', models.FloatField()),
                ('pv7_voltage', models.FloatField()),
                ('pv8_current', models.FloatField()),
                ('pv8_dc_current', models.FloatField()),
                ('pv8_dc_power', models.FloatField()),
                ('pv8_dc_voltage', models.FloatField()),
                ('pv8_voltage', models.FloatField()),
                ('pv9_current', models.FloatField()),
                ('pv9_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('status', models.CharField(max_length=255)),
                ('temp', models.FloatField()),
                ('today_energy', models.FloatField()),
                ('total_energy', models.FloatField()),
                ('total_strings_current', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yest_energy', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplAHU6',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_power', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('dc_power', models.FloatField()),
                ('dc_voltage', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fault', models.CharField(max_length=255)),
                ('frequency', models.FloatField()),
                ('inv_fault_subcode', models.CharField(max_length=255)),
                ('inv_warning_bit_h', models.IntegerField()),
                ('inv_warning_subcode', models.IntegerField()),
                ('peak_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('pv1_current', models.FloatField()),
                ('pv1_dc_current', models.FloatField()),
                ('pv1_dc_power', models.FloatField()),
                ('pv1_dc_voltage', models.FloatField()),
                ('pv1_voltage', models.FloatField()),
                ('pv10_current', models.FloatField()),
                ('pv10_voltage', models.FloatField()),
                ('pv11_current', models.FloatField()),
                ('pv11_voltage', models.FloatField()),
                ('pv12_current', models.FloatField()),
                ('pv12_voltage', models.FloatField()),
                ('pv13_current', models.FloatField()),
                ('pv13_voltage', models.FloatField()),
                ('pv14_current', models.FloatField()),
                ('pv14_voltage', models.FloatField()),
                ('pv15_current', models.FloatField()),
                ('pv15_voltage', models.FloatField()),
                ('pv16_current', models.FloatField()),
                ('pv16_voltage', models.FloatField()),
                ('pv17_current', models.FloatField()),
                ('pv17_voltage', models.FloatField()),
                ('pv18_current', models.FloatField()),
                ('pv18_voltage', models.FloatField()),
                ('pv19_current', models.FloatField()),
                ('pv19_voltage', models.FloatField()),
                ('pv2_current', models.FloatField()),
                ('pv2_dc_current', models.FloatField()),
                ('pv2_dc_power', models.FloatField()),
                ('pv2_dc_voltage', models.FloatField()),
                ('pv2_voltage', models.FloatField()),
                ('pv20_current', models.FloatField()),
                ('pv20_voltage', models.FloatField()),
                ('pv3_current', models.FloatField()),
                ('pv3_dc_current', models.FloatField()),
                ('pv3_dc_power', models.FloatField()),
                ('pv3_dc_voltage', models.FloatField()),
                ('pv3_voltage', models.FloatField()),
                ('pv4_current', models.FloatField()),
                ('pv4_dc_current', models.FloatField()),
                ('pv4_dc_power', models.FloatField()),
                ('pv4_dc_voltage', models.FloatField()),
                ('pv4_voltage', models.FloatField()),
                ('pv5_current', models.FloatField()),
                ('pv5_dc_current', models.FloatField()),
                ('pv5_dc_power', models.FloatField()),
                ('pv5_dc_voltage', models.FloatField()),
                ('pv5_voltage', models.FloatField()),
                ('pv6_current', models.FloatField()),
                ('pv6_dc_current', models.FloatField()),
                ('pv6_dc_power', models.FloatField()),
                ('pv6_dc_voltage', models.FloatField()),
                ('pv6_voltage', models.FloatField()),
                ('pv7_current', models.FloatField()),
                ('pv7_dc_current', models.FloatField()),
                ('pv7_dc_power', models.FloatField()),
                ('pv7_dc_voltage', models.FloatField()),
                ('pv7_voltage', models.FloatField()),
                ('pv8_current', models.FloatField()),
                ('pv8_dc_current', models.FloatField()),
                ('pv8_dc_power', models.FloatField()),
                ('pv8_dc_voltage', models.FloatField()),
                ('pv8_voltage', models.FloatField()),
                ('pv9_current', models.FloatField()),
                ('pv9_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('status', models.CharField(max_length=255)),
                ('temp', models.FloatField()),
                ('today_energy', models.FloatField()),
                ('total_energy', models.FloatField()),
                ('total_strings_current', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yest_energy', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplAHU7',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_power', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('dc_power', models.FloatField()),
                ('dc_voltage', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fault', models.CharField(max_length=255)),
                ('frequency', models.FloatField()),
                ('inv_fault_subcode', models.CharField(max_length=255)),
                ('inv_warning_bit_h', models.IntegerField()),
                ('inv_warning_subcode', models.IntegerField()),
                ('peak_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('pv1_current', models.FloatField()),
                ('pv1_dc_current', models.FloatField()),
                ('pv1_dc_power', models.FloatField()),
                ('pv1_dc_voltage', models.FloatField()),
                ('pv1_voltage', models.FloatField()),
                ('pv10_current', models.FloatField()),
                ('pv10_voltage', models.FloatField()),
                ('pv11_current', models.FloatField()),
                ('pv11_voltage', models.FloatField()),
                ('pv12_current', models.FloatField()),
                ('pv12_voltage', models.FloatField()),
                ('pv13_current', models.FloatField()),
                ('pv13_voltage', models.FloatField()),
                ('pv14_current', models.FloatField()),
                ('pv14_voltage', models.FloatField()),
                ('pv15_current', models.FloatField()),
                ('pv15_voltage', models.FloatField()),
                ('pv16_current', models.FloatField()),
                ('pv16_voltage', models.FloatField()),
                ('pv17_current', models.FloatField()),
                ('pv17_voltage', models.FloatField()),
                ('pv18_current', models.FloatField()),
                ('pv18_voltage', models.FloatField()),
                ('pv19_current', models.FloatField()),
                ('pv19_voltage', models.FloatField()),
                ('pv2_current', models.FloatField()),
                ('pv2_dc_current', models.FloatField()),
                ('pv2_dc_power', models.FloatField()),
                ('pv2_dc_voltage', models.FloatField()),
                ('pv2_voltage', models.FloatField()),
                ('pv20_current', models.FloatField()),
                ('pv20_voltage', models.FloatField()),
                ('pv3_current', models.FloatField()),
                ('pv3_dc_current', models.FloatField()),
                ('pv3_dc_power', models.FloatField()),
                ('pv3_dc_voltage', models.FloatField()),
                ('pv3_voltage', models.FloatField()),
                ('pv4_current', models.FloatField()),
                ('pv4_dc_current', models.FloatField()),
                ('pv4_dc_power', models.FloatField()),
                ('pv4_dc_voltage', models.FloatField()),
                ('pv4_voltage', models.FloatField()),
                ('pv5_current', models.FloatField()),
                ('pv5_dc_current', models.FloatField()),
                ('pv5_dc_power', models.FloatField()),
                ('pv5_dc_voltage', models.FloatField()),
                ('pv5_voltage', models.FloatField()),
                ('pv6_current', models.FloatField()),
                ('pv6_dc_current', models.FloatField()),
                ('pv6_dc_power', models.FloatField()),
                ('pv6_dc_voltage', models.FloatField()),
                ('pv6_voltage', models.FloatField()),
                ('pv7_current', models.FloatField()),
                ('pv7_dc_current', models.FloatField()),
                ('pv7_dc_power', models.FloatField()),
                ('pv7_dc_voltage', models.FloatField()),
                ('pv7_voltage', models.FloatField()),
                ('pv8_current', models.FloatField()),
                ('pv8_dc_current', models.FloatField()),
                ('pv8_dc_power', models.FloatField()),
                ('pv8_dc_voltage', models.FloatField()),
                ('pv8_voltage', models.FloatField()),
                ('pv9_current', models.FloatField()),
                ('pv9_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('status', models.CharField(max_length=255)),
                ('temp', models.FloatField()),
                ('today_energy', models.FloatField()),
                ('total_energy', models.FloatField()),
                ('total_strings_current', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yest_energy', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplAHU9',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_power', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('dc_power', models.FloatField()),
                ('dc_voltage', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fault', models.CharField(max_length=255)),
                ('frequency', models.FloatField()),
                ('inv_fault_subcode', models.CharField(max_length=255)),
                ('inv_warning_bit_h', models.IntegerField()),
                ('inv_warning_subcode', models.IntegerField()),
                ('peak_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('pv1_current', models.FloatField()),
                ('pv1_dc_current', models.FloatField()),
                ('pv1_dc_power', models.FloatField()),
                ('pv1_dc_voltage', models.FloatField()),
                ('pv1_voltage', models.FloatField()),
                ('pv10_current', models.FloatField()),
                ('pv10_voltage', models.FloatField()),
                ('pv11_current', models.FloatField()),
                ('pv11_voltage', models.FloatField()),
                ('pv12_current', models.FloatField()),
                ('pv12_voltage', models.FloatField()),
                ('pv13_current', models.FloatField()),
                ('pv13_voltage', models.FloatField()),
                ('pv14_current', models.FloatField()),
                ('pv14_voltage', models.FloatField()),
                ('pv15_current', models.FloatField()),
                ('pv15_voltage', models.FloatField()),
                ('pv16_current', models.FloatField()),
                ('pv16_voltage', models.FloatField()),
                ('pv17_current', models.FloatField()),
                ('pv17_voltage', models.FloatField()),
                ('pv18_current', models.FloatField()),
                ('pv18_voltage', models.FloatField()),
                ('pv19_current', models.FloatField()),
                ('pv19_voltage', models.FloatField()),
                ('pv2_current', models.FloatField()),
                ('pv2_dc_current', models.FloatField()),
                ('pv2_dc_power', models.FloatField()),
                ('pv2_dc_voltage', models.FloatField()),
                ('pv2_voltage', models.FloatField()),
                ('pv20_current', models.FloatField()),
                ('pv20_voltage', models.FloatField()),
                ('pv3_current', models.FloatField()),
                ('pv3_dc_current', models.FloatField()),
                ('pv3_dc_power', models.FloatField()),
                ('pv3_dc_voltage', models.FloatField()),
                ('pv3_voltage', models.FloatField()),
                ('pv4_current', models.FloatField()),
                ('pv4_dc_current', models.FloatField()),
                ('pv4_dc_power', models.FloatField()),
                ('pv4_dc_voltage', models.FloatField()),
                ('pv4_voltage', models.FloatField()),
                ('pv5_current', models.FloatField()),
                ('pv5_dc_current', models.FloatField()),
                ('pv5_dc_power', models.FloatField()),
                ('pv5_dc_voltage', models.FloatField()),
                ('pv5_voltage', models.FloatField()),
                ('pv6_current', models.FloatField()),
                ('pv6_dc_current', models.FloatField()),
                ('pv6_dc_power', models.FloatField()),
                ('pv6_dc_voltage', models.FloatField()),
                ('pv6_voltage', models.FloatField()),
                ('pv7_current', models.FloatField()),
                ('pv7_dc_current', models.FloatField()),
                ('pv7_dc_power', models.FloatField()),
                ('pv7_dc_voltage', models.FloatField()),
                ('pv7_voltage', models.FloatField()),
                ('pv8_current', models.FloatField()),
                ('pv8_dc_current', models.FloatField()),
                ('pv8_dc_power', models.FloatField()),
                ('pv8_dc_voltage', models.FloatField()),
                ('pv8_voltage', models.FloatField()),
                ('pv9_current', models.FloatField()),
                ('pv9_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('status', models.CharField(max_length=255)),
                ('temp', models.FloatField()),
                ('today_energy', models.FloatField()),
                ('total_energy', models.FloatField()),
                ('total_strings_current', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yest_energy', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplCellLTP3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_power', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('dc_power', models.FloatField()),
                ('dc_voltage', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fault', models.CharField(max_length=255)),
                ('frequency', models.FloatField()),
                ('inv_fault_subcode', models.CharField(max_length=255)),
                ('inv_warning_bit_h', models.IntegerField()),
                ('inv_warning_subcode', models.IntegerField()),
                ('peak_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('pv1_current', models.FloatField()),
                ('pv1_dc_current', models.FloatField()),
                ('pv1_dc_power', models.FloatField()),
                ('pv1_dc_voltage', models.FloatField()),
                ('pv1_voltage', models.FloatField()),
                ('pv10_current', models.FloatField()),
                ('pv10_voltage', models.FloatField()),
                ('pv11_current', models.FloatField()),
                ('pv11_voltage', models.FloatField()),
                ('pv12_current', models.FloatField()),
                ('pv12_voltage', models.FloatField()),
                ('pv13_current', models.FloatField()),
                ('pv13_voltage', models.FloatField()),
                ('pv14_current', models.FloatField()),
                ('pv14_voltage', models.FloatField()),
                ('pv15_current', models.FloatField()),
                ('pv15_voltage', models.FloatField()),
                ('pv16_current', models.FloatField()),
                ('pv16_voltage', models.FloatField()),
                ('pv17_current', models.FloatField()),
                ('pv17_voltage', models.FloatField()),
                ('pv18_current', models.FloatField()),
                ('pv18_voltage', models.FloatField()),
                ('pv19_current', models.FloatField()),
                ('pv19_voltage', models.FloatField()),
                ('pv2_current', models.FloatField()),
                ('pv2_dc_current', models.FloatField()),
                ('pv2_dc_power', models.FloatField()),
                ('pv2_dc_voltage', models.FloatField()),
                ('pv2_voltage', models.FloatField()),
                ('pv20_current', models.FloatField()),
                ('pv20_voltage', models.FloatField()),
                ('pv3_current', models.FloatField()),
                ('pv3_dc_current', models.FloatField()),
                ('pv3_dc_power', models.FloatField()),
                ('pv3_dc_voltage', models.FloatField()),
                ('pv3_voltage', models.FloatField()),
                ('pv4_current', models.FloatField()),
                ('pv4_dc_current', models.FloatField()),
                ('pv4_dc_power', models.FloatField()),
                ('pv4_dc_voltage', models.FloatField()),
                ('pv4_voltage', models.FloatField()),
                ('pv5_current', models.FloatField()),
                ('pv5_dc_current', models.FloatField()),
                ('pv5_dc_power', models.FloatField()),
                ('pv5_dc_voltage', models.FloatField()),
                ('pv5_voltage', models.FloatField()),
                ('pv6_current', models.FloatField()),
                ('pv6_dc_current', models.FloatField()),
                ('pv6_dc_power', models.FloatField()),
                ('pv6_dc_voltage', models.FloatField()),
                ('pv6_voltage', models.FloatField()),
                ('pv7_current', models.FloatField()),
                ('pv7_dc_current', models.FloatField()),
                ('pv7_dc_power', models.FloatField()),
                ('pv7_dc_voltage', models.FloatField()),
                ('pv7_voltage', models.FloatField()),
                ('pv8_current', models.FloatField()),
                ('pv8_dc_current', models.FloatField()),
                ('pv8_dc_power', models.FloatField()),
                ('pv8_dc_voltage', models.FloatField()),
                ('pv8_voltage', models.FloatField()),
                ('pv9_current', models.FloatField()),
                ('pv9_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('status', models.CharField(max_length=255)),
                ('temp', models.FloatField()),
                ('today_energy', models.FloatField()),
                ('total_energy', models.FloatField()),
                ('total_strings_current', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yest_energy', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplCellLTP3Repeat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ac_power', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('dc_power', models.FloatField()),
                ('dc_voltage', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('fault', models.CharField(max_length=255)),
                ('frequency', models.FloatField()),
                ('inv_fault_subcode', models.CharField(max_length=255)),
                ('inv_warning_bit_h', models.IntegerField()),
                ('inv_warning_subcode', models.IntegerField()),
                ('peak_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('pv1_current', models.FloatField()),
                ('pv1_dc_current', models.FloatField()),
                ('pv1_dc_power', models.FloatField()),
                ('pv1_dc_voltage', models.FloatField()),
                ('pv1_voltage', models.FloatField()),
                ('pv10_current', models.FloatField()),
                ('pv10_voltage', models.FloatField()),
                ('pv11_current', models.FloatField()),
                ('pv11_voltage', models.FloatField()),
                ('pv12_current', models.FloatField()),
                ('pv12_voltage', models.FloatField()),
                ('pv13_current', models.FloatField()),
                ('pv13_voltage', models.FloatField()),
                ('pv14_current', models.FloatField()),
                ('pv14_voltage', models.FloatField()),
                ('pv15_current', models.FloatField()),
                ('pv15_voltage', models.FloatField()),
                ('pv16_current', models.FloatField()),
                ('pv16_voltage', models.FloatField()),
                ('pv17_current', models.FloatField()),
                ('pv17_voltage', models.FloatField()),
                ('pv18_current', models.FloatField()),
                ('pv18_voltage', models.FloatField()),
                ('pv19_current', models.FloatField()),
                ('pv19_voltage', models.FloatField()),
                ('pv2_current', models.FloatField()),
                ('pv2_dc_current', models.FloatField()),
                ('pv2_dc_power', models.FloatField()),
                ('pv2_dc_voltage', models.FloatField()),
                ('pv2_voltage', models.FloatField()),
                ('pv20_current', models.FloatField()),
                ('pv20_voltage', models.FloatField()),
                ('pv3_current', models.FloatField()),
                ('pv3_dc_current', models.FloatField()),
                ('pv3_dc_power', models.FloatField()),
                ('pv3_dc_voltage', models.FloatField()),
                ('pv3_voltage', models.FloatField()),
                ('pv4_current', models.FloatField()),
                ('pv4_dc_current', models.FloatField()),
                ('pv4_dc_power', models.FloatField()),
                ('pv4_dc_voltage', models.FloatField()),
                ('pv4_voltage', models.FloatField()),
                ('pv5_current', models.FloatField()),
                ('pv5_dc_current', models.FloatField()),
                ('pv5_dc_power', models.FloatField()),
                ('pv5_dc_voltage', models.FloatField()),
                ('pv5_voltage', models.FloatField()),
                ('pv6_current', models.FloatField()),
                ('pv6_dc_current', models.FloatField()),
                ('pv6_dc_power', models.FloatField()),
                ('pv6_dc_voltage', models.FloatField()),
                ('pv6_voltage', models.FloatField()),
                ('pv7_current', models.FloatField()),
                ('pv7_dc_current', models.FloatField()),
                ('pv7_dc_power', models.FloatField()),
                ('pv7_dc_voltage', models.FloatField()),
                ('pv7_voltage', models.FloatField()),
                ('pv8_current', models.FloatField()),
                ('pv8_dc_current', models.FloatField()),
                ('pv8_dc_power', models.FloatField()),
                ('pv8_dc_voltage', models.FloatField()),
                ('pv8_voltage', models.FloatField()),
                ('pv9_current', models.FloatField()),
                ('pv9_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('status', models.CharField(max_length=255)),
                ('temp', models.FloatField()),
                ('today_energy', models.FloatField()),
                ('total_energy', models.FloatField()),
                ('total_strings_current', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yest_energy', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplHT_HTPanelIncomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy_export', models.FloatField()),
                ('avg_ac_power', models.FloatField()),
                ('avg_app_power', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_pf', models.FloatField()),
                ('avg_rac_power', models.FloatField()),
                ('avg_voltage', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_pf', models.FloatField()),
                ('b_rac_power', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('pn_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_pf', models.FloatField()),
                ('r_rac_power', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('thd_voltage_an', models.FloatField()),
                ('thd_voltage_cn', models.FloatField()),
                ('thd_voltage_en', models.FloatField()),
                ('today_app_energy_export', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_export', models.FloatField()),
                ('total_import', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_pf', models.FloatField()),
                ('y_rac_power', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yes_app_energy_export', models.FloatField()),
                ('yes_export', models.FloatField()),
                ('yes_import', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplHT_OutGoing1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy_export', models.FloatField()),
                ('avg_ac_power', models.FloatField()),
                ('avg_app_power', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_pf', models.FloatField()),
                ('avg_rac_power', models.FloatField()),
                ('avg_voltage', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_pf', models.FloatField()),
                ('b_rac_power', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('pn_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_pf', models.FloatField()),
                ('r_rac_power', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('thd_voltage_an', models.FloatField()),
                ('thd_voltage_cn', models.FloatField()),
                ('thd_voltage_en', models.FloatField()),
                ('today_app_energy_export', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_export', models.FloatField()),
                ('total_import', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_pf', models.FloatField()),
                ('y_rac_power', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yes_app_energy_export', models.FloatField()),
                ('yes_export', models.FloatField()),
                ('yes_import', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplHT_OutGoing2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy_export', models.FloatField()),
                ('avg_ac_power', models.FloatField()),
                ('avg_app_power', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_pf', models.FloatField()),
                ('avg_rac_power', models.FloatField()),
                ('avg_voltage', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_pf', models.FloatField()),
                ('b_rac_power', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('pn_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_pf', models.FloatField()),
                ('r_rac_power', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('thd_voltage_an', models.FloatField()),
                ('thd_voltage_cn', models.FloatField()),
                ('thd_voltage_en', models.FloatField()),
                ('today_app_energy_export', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_export', models.FloatField()),
                ('total_import', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_pf', models.FloatField()),
                ('y_rac_power', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yes_app_energy_export', models.FloatField()),
                ('yes_export', models.FloatField()),
                ('yes_import', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplHT_OutGoing3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy_export', models.FloatField()),
                ('avg_ac_power', models.FloatField()),
                ('avg_app_power', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_pf', models.FloatField()),
                ('avg_rac_power', models.FloatField()),
                ('avg_voltage', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_pf', models.FloatField()),
                ('b_rac_power', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('pn_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_pf', models.FloatField()),
                ('r_rac_power', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('thd_voltage_an', models.FloatField()),
                ('thd_voltage_cn', models.FloatField()),
                ('thd_voltage_en', models.FloatField()),
                ('today_app_energy_export', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_export', models.FloatField()),
                ('total_import', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_pf', models.FloatField()),
                ('y_rac_power', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yes_app_energy_export', models.FloatField()),
                ('yes_export', models.FloatField()),
                ('yes_import', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_PepplHT_OutGoing4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy_export', models.FloatField()),
                ('avg_ac_power', models.FloatField()),
                ('avg_app_power', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_pf', models.FloatField()),
                ('avg_rac_power', models.FloatField()),
                ('avg_voltage', models.FloatField()),
                ('b_ac_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_pf', models.FloatField()),
                ('b_rac_power', models.FloatField()),
                ('b_voltage', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('pn_voltage', models.FloatField()),
                ('r_ac_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_pf', models.FloatField()),
                ('r_rac_power', models.FloatField()),
                ('r_voltage', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('thd_voltage_an', models.FloatField()),
                ('thd_voltage_cn', models.FloatField()),
                ('thd_voltage_en', models.FloatField()),
                ('today_app_energy_export', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_export', models.FloatField()),
                ('total_import', models.FloatField()),
                ('y_ac_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_pf', models.FloatField()),
                ('y_rac_power', models.FloatField()),
                ('y_voltage', models.FloatField()),
                ('yb_voltage', models.FloatField()),
                ('yes_app_energy_export', models.FloatField()),
                ('yes_export', models.FloatField()),
                ('yes_import', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1_Incomer1A',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1_Incomer1B',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1_Incomer1C',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1_Incomer1D',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1_Incomer1E',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1_OG1A',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1_OG1B',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1_OG1C',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1_OG1D',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1_OG1E',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1_OGSection1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1_OGSection2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1LT1_IncomerOG3F2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1LT1_Panel1PCW',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS1LT2_IncomerOG4F2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS2_Incomer2A',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS2_Incomer2B',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS2_Incomer2C',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS2_Incomer2D',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS2_Incomer2E',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS2_LTPIncomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS2_OutgoingABC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS2_Panel2A',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS2_Panel2B',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS2_Panel2C',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS2_Panel2D',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P1_UPS2_Panel2E',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_energy', models.FloatField()),
                ('avg_current', models.FloatField()),
                ('avg_line_voltage', models.FloatField()),
                ('avg_phase_voltage', models.FloatField()),
                ('avg_power_factor', models.FloatField()),
                ('b_active_power', models.FloatField()),
                ('b_app_power', models.FloatField()),
                ('b_current', models.FloatField()),
                ('b_phase_voltage', models.FloatField()),
                ('b_reactive_power', models.FloatField()),
                ('br_voltage', models.FloatField()),
                ('frequency', models.FloatField()),
                ('r_active_power', models.FloatField()),
                ('r_app_power', models.FloatField()),
                ('r_current', models.FloatField()),
                ('r_phase_voltage', models.FloatField()),
                ('r_reactive_power', models.FloatField()),
                ('ry_voltage', models.FloatField()),
                ('today_app_energy', models.FloatField()),
                ('today_export', models.FloatField()),
                ('today_import', models.FloatField()),
                ('total_energy_export', models.FloatField()),
                ('total_energy_import', models.FloatField()),
                ('total_reactive_power', models.FloatField()),
                ('y_active_power', models.FloatField()),
                ('y_app_power', models.FloatField()),
                ('y_current', models.FloatField()),
                ('y_current_demo', models.FloatField()),
                ('y_phase_voltage', models.FloatField()),
                ('y_power_factor', models.FloatField()),
                ('y_reactive_power', models.FloatField()),
                ('yb_voltage', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
